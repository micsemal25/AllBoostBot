import asyncio
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime, timedelta

TOKEN = '7256493186:AAH3bxgu7gG9cu_yEF5JHsBZX51I3fhhs4s'
ADMIN_ID = 324663088
tariff_active = False
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
num_month = ""
n = 0
user_id = []

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (—Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞)
user_data = {}

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
async def send_welcome(message: Message):
    chat_id = message.chat.id
    if chat_id not in user_data:
        user_data[chat_id] = {"count": 0, "reset_time": datetime.now()}
        print(user_data)
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è AllBoost Bot!üëã –£ –≤–∞—Å –µ—Å—Ç—å 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")


# –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ª–∏–º–∏—Ç–æ–º 10 —Å–æ–æ–±—â–µ–Ω–∏–π
async def gpt_message(message: Message):
    chat_id = message.chat.id
    user_info = user_data.get(chat_id, {"count": 0, "reset_time": 0, "expiry_time": None, "tariff_active": False})

    current_time = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
    if "expiry_time" not in user_info:
        user_info["expiry_time"] = None  # –£—Å—Ç–∞–Ω–æ–≤–∏–º default –∑–Ω–∞—á–µ–Ω–∏–µ

    if user_info["expiry_time"] is not None and current_time >= user_info["expiry_time"]:
        user_info["tariff_active"] = False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞ False
        user_info["expiry_time"] = None  # –û–±–Ω—É–ª—è–µ–º expiry_time
        await message.answer("üìõ –í–∞—à —Ç–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ.", reply_markup=generate_tariff_buttons())
        user_data[chat_id] = user_info
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if user_info.get("tariff_active"):
        # –¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ GPT
        gpt_response = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ GPT (—Å –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º)."
        await message.answer(gpt_response)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_info["count"] < 9 or current_time >= user_info["reset_time"]:
        if current_time >= user_info["reset_time"] and user_info["reset_time"] != current_time + timedelta(minutes=1):
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–±—Ä–æ—Å–∞
            user_info["count"] = 0
            user_info["reset_time"] = current_time + timedelta(minutes=1)

        user_info["count"] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        if user_info["count"] == 9:
            user_info["reset_time"] = current_time + timedelta(minutes=1)

        # –û—Ç–≤–µ—Ç GPT
        if user_info["count"] not in [9,8,7,6]:
            gpt_response = f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ GPT.\n–û—Å—Ç–∞–ª–æ—Å—å {10 - user_info["count"]} —Å–æ–æ–±—â–µ–Ω–∏–π."
            await message.answer(gpt_response)
        if user_info["count"] in [8, 7, 6]:
            gpt_response = f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ GPT.\n–û—Å—Ç–∞–ª–æ—Å—å {10 - user_info["count"]} —Å–æ–æ–±—â–µ–Ω–∏—è."
            await message.answer(gpt_response)
        if user_info["count"] == 9:
            gpt_response = f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ GPT.\n–û—Å—Ç–∞–ª–æ—Å—å {10 - user_info["count"]} —Å–æ–æ–±—â–µ–Ω–∏–µ."
            await message.answer(gpt_response)

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
        user_data[chat_id] = user_info
    else:
        # –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ
        await message.answer("üìõ –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –±–æ–ª–µ–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π.\nüëâ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1 —Å—É—Ç–∫–∏.", reply_markup=generate_tariff_buttons())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤
async def check_tariffs():
    global user_data
    while True:
        current_time = datetime.now()
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤: {current_time}")
        for chat_id, user_info in list(user_data.items()):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ "expiry_time" –∏ –Ω–µ–∏—Å—Ç—ë–∫—à–∏–π —Ç–∞—Ä–∏—Ñ
            if user_info.get("expiry_time") is not None and current_time >= user_info["expiry_time"]:
                print(f"–¢–∞—Ä–∏—Ñ –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –≤ {user_info["expiry_time"]}")
                user_info["tariff_active"] = False
                user_info["expiry_time"] = None  # –û–±–Ω—É–ª—è–µ–º expiry_time
                await bot.send_message(chat_id, "üìõ –í–∞—à —Ç–∞—Ä–∏—Ñ –∏—Å—Ç—ë–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ.", reply_markup=generate_tariff_buttons())
                user_data[chat_id] = user_info  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            else:
                print(f"–¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ {user_info.get("expiry_time")}")
        
        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
def generate_tariff_buttons():
    one_month = InlineKeyboardButton(
        text="‚ú® 1 –º–µ—Å—è—Ü",
        callback_data='1_month'
    )
    three_months = InlineKeyboardButton(
        text="‚ú® 3 –º–µ—Å—è—Ü–∞", 
        callback_data='3_months'
    )
    six_months = InlineKeyboardButton(
        text="‚ú® 6 –º–µ—Å—è—Ü–µ–≤", 
        callback_data='6_months'
    )
    nine_months = InlineKeyboardButton(
        text="‚ú® 9 –º–µ—Å—è—Ü–µ–≤", 
        callback_data='9_months'
    )
    twelve_month = InlineKeyboardButton(
        text="‚ú® 12 –º–µ—Å—è—Ü–µ–≤", 
        callback_data='12_months'
    )
    rows = [
        [one_month],
        [three_months],
        [six_months],
        [nine_months],
        [twelve_month]
    ]

    markup = InlineKeyboardMarkup(inline_keyboard=rows)

    return markup

async def pay_tariff1(callback_query: CallbackQuery):
    global num_month, n
    num_month += "1"
    n += 1
    await callback_query.message.answer("üí∏ –û–ø–ª–∞—Ç–∞ 299 —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω +79063493152 (–û–∑–æ–Ω –ë–∞–Ω–∫).\n‚ÄºÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

async def pay_tariff2(callback_query: CallbackQuery):
    global num_month, n
    num_month += "3"
    n += 1
    await callback_query.message.answer("üí∏ –û–ø–ª–∞—Ç–∞ 799 —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω +79063493152 (–û–∑–æ–Ω –ë–∞–Ω–∫).\n‚ÄºÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

async def pay_tariff3(callback_query: CallbackQuery):
    global num_month, n
    num_month += "6"
    n += 1
    await callback_query.message.answer("üí∏ –û–ø–ª–∞—Ç–∞ 1699 —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω +79063493152 (–û–∑–æ–Ω –ë–∞–Ω–∫).\n‚ÄºÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

async def pay_tariff4(callback_query: CallbackQuery):
    global num_month, n
    num_month += "9"
    n += 1
    await callback_query.message.answer("üí∏ –û–ø–ª–∞—Ç–∞ 2599 —Ä—É–±–ª–µ–π —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω +79063493152 (–û–∑–æ–Ω –ë–∞–Ω–∫).\n‚ÄºÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

async def pay_tariff5(callback_query: CallbackQuery):
    global num_month
    num_month += "12"
    n += 1
    await callback_query.message.answer("üí∏ –û–ø–ª–∞—Ç–∞ 3499 —Ä—É–±–ª–µ–π —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω +79063493152 (–û–∑–æ–Ω –ë–∞–Ω–∫).\n‚ÄºÔ∏è–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.")

def confirm_admin_pay():
    complite_admin_btn = InlineKeyboardButton(
        text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É",
        callback_data = 'complite_admin'
    )
    error_admin_btn = InlineKeyboardButton(
        text = "‚ùå –û—Ç–∫–∞–∑–∞—Ç—å",
        callback_data = 'error_admin'
    )
    row1 = [complite_admin_btn]
    row2 = [error_admin_btn]
    rows = [row1, row2]
    markup = InlineKeyboardMarkup(inline_keyboard=rows)
    return markup

async def confirm_pay_user(message: types.Message):
    global user_id
    user_id.append(message.chat.id)
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
    await bot.send_message(ADMIN_ID, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ:")
    await bot.send_photo(ADMIN_ID, photo=message.photo[-1].file_id)
    await bot.send_message(ADMIN_ID,f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.username}", reply_markup = confirm_admin_pay())
    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –ø–ª–∞—Ç—ë–∂ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã —Ç–∞—Ä–∏—Ñ–∞
async def process_tariff(callback_query: CallbackQuery):
    global num_month
    chat_id = user_id[0]  # –ë–µ—Ä–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_info = user_data.get(chat_id, {"count": 0, "reset_time": datetime.now(), "expiry_time": None, "tariff_active": False})

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ callback_data –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {callback_query.data}", timedelta(minutes=1))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    if callback_query.data == 'complite_admin' and (num_month == "1" or num_month == "1"*n):
        user_info["expiry_time"] = datetime.now() + timedelta(days=30)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ –Ω–∞ 1 –º–∏–Ω—É—Ç—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    elif callback_query.data == 'complite_admin' and (num_month == "3" or num_month == "1"*n):
        user_info["expiry_time"] = datetime.now() + timedelta(days=90)
    elif callback_query.data == 'complite_admin' and (num_month == "6" or num_month == "1"*n):
        user_info["expiry_time"] = datetime.now() + timedelta(days=180)
    elif callback_query.data == 'complite_admin' and (num_month == "9" or num_month == "1"*n):
        user_info["expiry_time"] = datetime.now() + timedelta(days=270)
    elif callback_query.data == 'complite_admin' and (num_month == "12" or num_month == "1"*n):
        user_info["expiry_time"] = datetime.now() + timedelta(days=365)
    else:
        print("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ callback_data:", callback_query.data)  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫

    # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞
    print(f"–¢–∞—Ä–∏—Ñ –æ–ø–ª–∞—á–µ–Ω: {chat_id}, –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ {user_info["expiry_time"]}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    user_info["tariff_active"] = True

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_data[chat_id] = user_info

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(chat_id, "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –¢–∞—Ä–∏—Ñ –ø–æ–¥–∫–ª—é—á—ë–Ω.", reply_markup=support_continue_buttons())
    await callback_query.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")

async def error_pay(callback_query: CallbackQuery):
    chat_id = user_id[0]
    await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–Ω–æ–≤–∞.")


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –∏–ª–∏ —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
def support_continue_buttons():
    url_admin_btn = InlineKeyboardButton(
        text="üÜò –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", 
        url="https://t.me/AlexchelZzz"
    )
    continue_chat_btn = InlineKeyboardButton(
        text="üí¨ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ", 
        callback_data='continue_chat'
    )
    row1 = [url_admin_btn]
    row2 = [continue_chat_btn]
    rows = [row1, row2]
    markup = InlineKeyboardMarkup(inline_keyboard = rows)
    return markup

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ"
async def continue_chat(callback_query: CallbackQuery):
    chat_id = callback_query.message.chat.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[chat_id]["count"] = 0
    user_data[chat_id]["reset_time"] = datetime.now() + timedelta(days=1)
    
    await callback_query.answer()
    await callback_query.message.answer("üí¨ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º! –í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    asyncio.create_task(check_tariffs())
    asyncio.create_task(check_tariffs())
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.message.register(send_welcome, Command(commands=["start"]))
    dp.message.register(confirm_pay_user, F.photo)
    dp.message.register(gpt_message)
    dp.callback_query.register(pay_tariff1, lambda c: c.data == '1_month')
    dp.callback_query.register(pay_tariff2, lambda c: c.data == '3_months')
    dp.callback_query.register(pay_tariff3, lambda c: c.data == '6_months')
    dp.callback_query.register(pay_tariff4, lambda c: c.data == '9_months')
    dp.callback_query.register(pay_tariff5, lambda c: c.data == '12_months')
    dp.callback_query.register(process_tariff, lambda c: c.data == 'complite_admin')
    dp.callback_query.register(error_pay, lambda c: c.data == 'error_admin')
    dp.callback_query.register(continue_chat, lambda c: c.data == 'continue_chat')

    # –ó–∞–ø—É—Å–∫ long-polling
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
